WITH Ada.Text_IO,Ada.Integer_Text_IO,Ada.Float_Text_IO;
USE Ada.Text_IO,Ada.Integer_Text_IO,Ada.Float_Text_IO;


PACKAGE BODY Gestion_Locataire IS

   -------------------------------- Verif dispo ------------------------------------------

   FUNCTION Verif_Dispo (Nbr_Place: T_Gestion_Activite; Acti: T_Activite; Sem : T_Semaine) RETURN Boolean IS
      Dispo: Boolean;

   BEGIN
      IF Nbr_Place(Sem, Acti)  <= 0 and Acti /= Rien THEN
         Dispo := False;
      ELSIF Nbr_Place(Sem, Acti) > 0  and Acti /= Rien THEN
         Dispo := True;
      END IF;
      RETURN (Dispo);
   END Verif_Dispo;

   --------------------------------------- Inscription act et initialisation d'activite --------------------------------------

   PROCEDURE Saisie_Act (Choix_Act: IN OUT T_Activite; Nbr_Place: IN OUT T_Gestion_Activite; Choix : OUT T_Activite_Locataire; Sem: IN T_Semaine) IS
      Mot : T_Mot;
      K: Integer;

      BEGIN
         Choix := (OTHERS => Rien);

         Put_line ("Voici les disponibilites des activites."); New_line;
         Affich_Tab (Nbr_Place);

         FOR Jour IN T_Semaine LOOP
         EXIT WHEN Jour = Samedi;

            Put ("Veuillez choisir une activite pour ");
            Put (T_Semaine'image(Jour));
            Put (" : ");

            LOOP
               BEGIN

                     Get_Line (Mot,K);
                  Choix_Act := T_Activite'Value (Mot(1..K));


--                     IF Verif_Dispo (Nbr_Place, Choix_Act, Jour) THEN
--                           Choix(jour) := Choix_Act;
--                           Nbr_Place(Jour, Choix_Act) := Nbr_Place(Jour, Choix_Act) - 1;
--                           Put_Line (T_Activite'Image(Choix(Jour))); EXIT;
--                  ELSE Put_Line ("Il n'y a plus de place. Recommencez.");
--                        END IF;




--                  IF Verif_Dispo (Nbr_Place, Choix_Act, Jour) THEN
--
--                     LOOP
--
--                        Choix(Jour) := Choix_Act;
--
--                        IF  Verif (Choix_Act, Choix) THEN
--                           Put_Line ("Vous avez deja choisi cette activite. Choississez une autre activite.");
--                        ELSE

--                           Nbr_Place(Jour, Choix_Act) := Nbr_Place(Jour, Choix_Act) - 1;
--                           Put_Line (T_Activite'Image(Choix(Jour))); EXIT;
--                        END IF;
--                     END LOOP;
--                     EXIT;
--

--                  ELSE Put_Line ("Il n'y a plus de place. Recommencez.");
--                        END IF;


--                        Choix(Jour) := Choix_Act;
--                        IF Verif_Dispo (Nbr_Place, Choix_Act, Jour)= False THEN
--                           Put_Line ("Il n'y a plus de place. Recommencez.");
--                        ELSIF Verif (Choix_Act, Choix) THEN
--                     Put_Line ("Vous avez deja choisi cette activite. Choississez une autre activite.");
--                        ELSE

--                           Nbr_Place(Jour, Choix_Act) := Nbr_Place(Jour, Choix_Act) - 1;
--                           Put_Line (T_Activite'Image(Choix(Jour))); EXIT;
--                        END IF;


                  -- verif dispo renvoit false quand plus de place

                  --verif renvoit true quand même activite
                                 Choix(Jour) := Choix_Act;

                  IF Verif_Dispo (Nbr_Place, Choix_Act, Jour) AND THEN NOT Verif (Choix_Act, Choix) THEN
                     Nbr_Place(Jour, Choix_Act) := Nbr_Place(Jour, Choix_Act) - 1;
                     Put_Line (T_Activite'Image(Choix(Jour))); EXIT;
                  ELSIF NOT Verif_Dispo (Nbr_Place, Choix_Act, Jour) AND THEN NOT Verif (Choix_Act, Choix) THEN
                     Put_Line ("Il n'y a plus de place. Recommencez.");
                  ELSIF NOT Verif_Dispo (Nbr_Place, Choix_Act, Jour) AND THEN Verif (Choix_Act, Choix) THEN
                     Put_Line ("Il n'y a plus de place. Recommencez.");
                  ELSIF Verif_Dispo (Nbr_Place, Choix_Act, Jour) AND THEN Verif (Choix_Act, Choix) THEN
                     Put_Line ("Vous avez deja choisi cette activite. Choississez une autre activite.");
                  END IF;





--                     IF Verif_Dispo (Nbr_Place, Choix_Act, Jour) = False THEN
--                        Put_Line ("Il n'y a plus de place. Recommencez.");
--                        ELSIF Verif (Choix_Act, Choix) THEN
--                     Put_Line ("Vous avez deja choisi cette activite. Choississez une autre activite.");
--                  ELSIF Verif_Dispo (Nbr_Place, Choix_Act, Jour) AND Verif (Choix_Act, Choix) = False THEN
--                     Choix(Jour) := Choix_Act;
--                     Nbr_Place(Jour, Choix_Act) := Nbr_Place(Jour, Choix_Act) - 1;
--                     Put_Line (T_Activite'Image(Choix(Jour))); EXIT;

--
--                        END IF;



                     EXCEPTION
                     WHEN Constraint_Error => Put_Line ("Erreur de saisie. Veuillez ressaisir l'activite voulue.");
               END;
            END LOOP;
         END LOOP;

      FOR P IN T_Activite_Locataire'range LOOP
         Put (T_Activite'image(Choix(P))); Put(",");
      END LOOP;
   END Saisie_Act;


      ---------------------------------- Verification donnees -------------------------------------------
      FUNCTION Verif (Choix_Act: T_Activite; Choix : T_Activite_Locataire) RETURN Boolean IS
         Deja_Pris: Boolean := False;

      BEGIN

         FOR Jour IN T_Activite_Locataire'RANGE LOOP
               IF Choix_Act = Choix(Jour) AND Choix(Jour) /= Rien THEN Deja_Pris := True;
               END IF;
            END LOOP;
            RETURN (Deja_Pris);
      END Verif;

   ------------------------------------- Enregistrement (Affichage) d'activite -------------------------------------

   PROCEDURE Save_Loc (Choix_Act: IN OUT T_Activite; Nbr_Place: IN OUT T_Gestion_Activite; Choix : IN OUT T_Activite_Locataire; Sem : IN T_Semaine) IS


   BEGIN
--      Saisie_Act (Choix_Act, Nbr_Place, Choix, Sem);

      FOR J IN T_Activite_Locataire'RANGE LOOP
         Put ("Vous etes inscrit a l'activite - ");
         Put (T_Activite'image(Choix(J)));
            Put (" - le ");
            Put (T_Semaine'Image(J)); New_Line;
         END LOOP;

   END Save_Loc;


   ------------------------------------- Remplir données loc --------------------------------------
   PROCEDURE Saisie_Loc (Infoloc: IN OUT T_Info_Locataire) IS
      K: Integer;
      Nom :  T_Mot:=(OTHERS =>' ');
      Prenom :  T_Mot:=(OTHERS =>' ');

   BEGIN
      Put_Line ("Saissisez votre nom.");
      Get_Line (nom, K);
      Put_Line ("Saissisez votre prenom.");
      Get_Line (Prenom, K);
      Infoloc.Nom_locataire:= Nom;
      Infoloc.prenom_locataire:=Prenom;
      Put ("Votre nom est ");
      Put (Infoloc.Nom_Locataire); Put (".");
      New_Line;
      Put ("Votre prenom est ");
      Put (Infoloc.Prenom_Locataire); Put (".");
      New_Line;

   END Saisie_Loc;

   ------------------------------------- Affiliation kdo -----------------------------------------------------

   PROCEDURE Affil_KDO (KDO_Tirage: IN OUT T_KDO; Nbr_Stock : IN OUT T_Gestion_KDO; Infoloc: IN OUT T_Info_Locataire; Bilan_Kdo:IN OUT T_Gestion_KDO) IS

   BEGIN
      Distribution_KDO (KDO_Tirage, Nbr_Stock, Bilan_KDO);
     Infoloc.Cadeau  := KDO_Tirage;
      Put ("Le cadeau affecte est ");
         Put (T_KDO'Image(Infoloc.Cadeau));
      Put_Line (".");
   END Affil_KDO;


   -------------------------------------------- Listes locataire --------------------------------------------
   PROCEDURE Lisloc (Infoloc : IN OUT T_Info_Locataire) IS

      Infoloc1,Infoloc2,Infoloc3,Infoloc4,Infoloc5,Infoloc6,Infoloc7,Infoloc8,Infoloc9,Infoloc10,Infoloc11,Infoloc12,Infoloc13,Infoloc14,Infoloc15,Infoloc16,Infoloc17:T_Info_Locataire;

   BEGIN

Infoloc1:= ("Valjean                       ", "Jean                          ", Boissons, (Raquette, Patinoire, Rien, Raquette, Rennes),True);
Infoloc2:= ("Valjean                       ", "Marie                         ", Chocolats, (Traineau, Patinoire, Deco, Biscuits, Rien),True);
Infoloc3:= ("Valjean                       ", "Lulu                          ", Biscuits, (Traineau, Biscuits, Deco, Ateliers, Rennes),True);

Infoloc4:= ("Perrault                      ", "Charles                       ", Chocolats,(Traineau,Raquette, biscuits,Igloos,Rennes),True);
Infoloc5:= ("Perrault                      ", "Jeanne                        ", Chocolats,(Biscuits,Raquette, Traineau,Igloos,Rennes),True);
Infoloc6:= ("Perrault                      ", "Blanche                       ", Fruits_confits,(Biscuits,Rien, Deco,rien,Ateliers),True);
Infoloc7:= ("Perrault                      ", "Paul                          ", Biscuits,(Igloos,Patinoire,Traineau,Biscuits,Rennes),False);
Infoloc8:= ("Perrault                      ", "Ariel                         ", Chocolats,(Traineau,Patinoire,Deco,Biscuits,Ateliers),True);

Infoloc9:= ("Sky                           ", "Luke                          ", Chocolats,(Traineau,Igloos,Patinoire,Raquette,Rennes),True);
Infoloc10:= ("Sky                           ", "Leila                         ", Fruits_confits,(Biscuits,Patinoire,Deco,Raquette,Ateliers),True);

Infoloc11:= ("Lovelace                      ", "Ada                           ",boissons,(Traineau,Patinoire,rien,rien,Igloos),False);
Infoloc12:= ("Lovelace                      ", "Leila                         ", Chocolats,(Traineau,Patinoire,Deco,biscuits,Rien),True);
Infoloc13:= ("Babbage                       ", "Charles                       ",biscuits,(Igloos,Patinoire,Traineau,biscuits,Rennes),False);
Infoloc14:= ("Babbage                       ", "Alice                         ", boissons,(Traineau,biscuits,Deco,Ateliers,Rennes),True);

Infoloc15:= ("Pan                           ", "Peter                         ",boissons,(rien,rien,rien,rien,rien),False);
Infoloc16:= ("Pan                           ", "Wendy                         ",Chocolats,(rien,rien,rien,rien,rien),False);
Infoloc17:= ("Pan                           ", "Michel                        ",biscuits,(rien,rien,rien,rien,rien),False);

   END Lisloc;




--   ----------------------------- Affichage infos locataire (Initial) ------------------------------------------------


   PROCEDURE Affichage_Locataire (Infoloc : IN OUT T_Info_Locataire; Activite_Jour : IN OUT T_Activite_Locataire; Choix_Act: IN OUT T_Activite; Nbr_Place: IN OUT T_Gestion_Activite; Choix : IN OUT T_Activite_Locataire; Sem : IN T_Semaine) IS
--      Nom_Locataire: Character;
--      Prenom_Locataire: Character;
--      Cadeau: T_KDO;
--      Veille: Boolean;
--      Activite_Jour: T_Activite_Locataire;

   BEGIN

      Put (Infoloc.Nom_Locataire);
      Put (Infoloc.Prenom_Locataire);
      Put (T_KDO'Image(Infoloc.Cadeau));
--      Put (Infoloc.Veille); afficher un boolean

      FOR I IN T_Activite_Locataire'RANGE LOOP
         Activite_Jour(I) := Choix (I);
      END LOOP;
      Save_Loc (Choix_Act, Nbr_Place,Choix, Sem);





   END Affichage_Locataire;
--






----   PROCEDURE Affichage_Locataire (KDO_Tirage: IN OUT T_KDO; Infoloc : IN OUT T_Info_Locataire; Activite_Jour : IN OUT T_Activite_Locataire; Nbr_stock : IN OUT T_Gestion_KDO) IS
----      Nom_Locataire: Character;
----      Prenom_Locataire: Character;
----      Cadeau: T_KDO;
----      Veille: Boolean;
----      Activite_Jour: T_Activite_Locataire;

----   BEGIN
----
----      Put (Nom_Locataire);
----      Put (Prenom_Locataire);
----
----      Distribution_KDO (KDO_Tirage, Nbr_Stock);
----      Cadeau := KDO_Tirage;
----      Put (T_KDO'image(Cadeau));
----         FOR J IN T_Activite_Locataire'RANGE LOOP
----            Put (Info_Loc(Activite_Jour)(I).Choix_Act(J));
----         END LOOP;
----      Put (Info_Loc(Veille)(I));















----   PROCEDURE Affichage_Locataire (Info_Loc: IN OUT T_Locataire; Choix_Act : IN OUT T_Activite_Locataire) IS
----      Nom: Character;
----      Prenom_Locataire: Character;
----      Cadeau: T_KDO;
----      Veille: Boolean;
----      Activite_Jour: T_Activite_Locataire;
----
----   BEGIN
----      FOR I IN T_Locataire'RANGE LOOP
----         Put (Info_Loc.Nom_Locataire(Nom)(I));
----         Put (Info_Loc(Prenom_Locataire)(I));
----         Put (Info_Loc(Cadeau)(I));
----            FOR J IN T_Activite_Locataire'RANGE LOOP
----               Put (Info_Loc(Activite_Jour)(I).Choix_Act(J));
----            END LOOP;
----         Put (Info_Loc(Veille)(I));
----      END LOOP;
----
----   END Affichage_Locataire;

-------------------------------------------------------------------------------------------------------------

-- --  PROCEDURE Liste_Locataire
--   -- chaque locataires sont enregistres en fonction de leur nom, prenom, cadeau,activite/jour (appeler la procedure inscription_activite) et la veille
--   -- permmetter





----   PROCEDURE Inscription_Activite IS
----   BEGIN

----   -- message si plus de place, verif si pas deux fois meme activite, demande si participe a la veillee, affiche la disponibilite, mettre a jour le planning elfes,
----      Put_Line ("Veuillez choisir une activité selon la disponibilite.");
------      Dispo;

----   END Inscription_Activite;






---- PROCEDURE Modif_activie
--   -- verifiaction nom prenom (condition) et descinscritpion (condition il faut qu'il se soit deja inscrit dans une activite,
--   --enlver une place dans le sdipso et la liste des elfes et raffichae les palnning mis a jour, et faire appel a la procedure inscription
-- --  PROCEDURE Stat_Locataire -- nbr de personne à la veillee, nbr personne qui participe à l'evenement et affichage

END Gestion_Locataire;

