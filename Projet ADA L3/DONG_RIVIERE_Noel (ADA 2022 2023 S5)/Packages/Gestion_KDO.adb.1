WITH Ada.Text_IO,Ada.Integer_Text_IO,Ada.Float_Text_IO;
USE Ada.Text_IO,Ada.Integer_Text_IO,Ada.Float_Text_IO;


PACKAGE BODY Gestion_KDO IS

   ---------------------- Afficher le stock des kdo ---------------------------------------

   PROCEDURE Affichage_Stock (KDO: IN OUT T_KDO; Nbr_Stock : OUT T_Gestion_KDO) IS
      BEGIN
          FOR i IN T_Gestion_KDO'RANGE LOOP
            FOR J IN T_Gestion_Kdo'RANGE LOOP
               Put ("Le stock de");
               Put (T_Kdo'image(I));
               Put ("est");
               Put (Nbr_Stock(J));
               New_Line;
            END LOOP;
            END LOOP;
      END Affichage_Stock;


   --------------------------- Initialiser le stock de kdo ------------------------------------


   PROCEDURE Init_Stock (KDO: IN OUT T_KDO; Nbr_Stock : OUT T_Gestion_KDO) IS
--      Nbr_Stock : T_Gestion_KDO;

   BEGIN
      Nbr_Stock(Boissons) := 6;
      Nbr_Stock(Biscuits) := 4;
      Nbr_Stock(Chocolats) := 8;
      Nbr_Stock(Fruits_Confits) := 5;
   END Init_Stock;


--   PROCEDURE Init_Stock (KDO: IN OUT T_KDO; Nbr_Stock : OUT T_Gestion_KDO) IS
--   BEGIN
--      Put_Line ("Veuillez saisir le stock initial.");
--         FOR I IN T_Kdo'RANGE LOOP
--         Put ("Stock de");
--         Put (T_Kdo'image(I));
--         Put (":"); new_line;
--            FOR J IN T_Gestion_Kdo'RANGE LOOP
--               Get (Nbr_Stock(J)); Skip_Line;
--            END LOOP;
--         END LOOP;
--   END Init_Stock;


   ------------------------ Distribuer les cadeaux ----------------------------------------
--A FINIR
   PROCEDURE Distribution_KDO (KDO_Tirage: IN OUT T_KDO; Nbr_Stock : IN OUT T_Gestion_KDO) IS

      Total : Integer;
      Pboissons, Pbiscuits, Pchocolats, Pfruits_Confits: Integer;
      N : Integer;

   BEGIN
      Total := 0;
      FOR I IN T_Gestion_KDO'RANGE LOOP
         Total := Total + (Nbr_Stock(I));
      END LOOP;

      Pboissons := (Nbr_Stock(Boissons) / Total) * 100;
      Pbiscuits := (Nbr_Stock(Biscuits) / Total) * 100;
      Pchocolats := (Nbr_Stock(Chocolats) / Total) * 100;
      Pfruits_Confits := (Nbr_Stock(Fruits_Confits) / Total) * 100;


      Initialise(0,100);
      N := Random;

      IF N <= Pbiscuits THEN
         KDO_Tirage := Biscuits;
      ELSIF N <= Pchocolats THEN
         KDO_Tirage := Chocolats;
      ELSIF N <= Pboissons THEN
         KDO_Tirage := Boissons;
      ELSE KDO_Tirage := Fruits_Confits;
      END IF;

   END Distribution_KDO;



   --------------------- Réapprovisionner les kdo ------------------------------------

   PROCEDURE Reassort (Nbr_stock : IN OUT T_Gestion_KDO) IS

    Ajout_Stock:integer;

   BEGIN
      Put_line ("Veuillez saisir le stock de reassort.");
      FOR I IN T_Gestion_Kdo'RANGE LOOP
         Put ("Reassort de");
         Put (T_KDO'image(I));
         Put (":"); new_line;
         Get (Ajout_stock); Skip_Line;
         Nbr_stock(I):= Nbr_stock(I) + Ajout_stock;
      END LOOP;

   END Reassort;


   ------------------- Bilan des kdo -----------------------------------
   PROCEDURE Stat_KDO (Nbr_stock : IN OUT T_Gestion_KDO; Bilan_Kdo : IN OUT T_Gestion_KDO) IS

   BEGIN
      Bilan_Kdo := (OTHERS => 0);
      FOR I IN T_Gestion_Kdo'RANGE LOOP
         IF Nbr_Stock (I) = Nbr_Stock (I) - 1 THEN
            Bilan_Kdo (I) := Bilan_Kdo (I) + 1;
         ELSIF Nbr_Stock (I) = Nbr_Stock (I) + 1 THEN
            Bilan_Kdo (I) := Bilan_Kdo (I) - 1;
         END IF;

         Put (Bilan_Kdo'Value(I));
         Put (" de ");
         Put (T_Gestion_Kdo'Image(I));
         Put (" ont été distribué.");

      END LOOP;


   END Stat_Kdo;


END Gestion_Kdo;


--   Nbr_Stock: t_gestion_kdo;
--   cases:boolean;
--   BEGIN
--      Cases:=FALSE;

--         FOR I IN T_KDO'RANGE LOOP

--            LOOP

--         Put ("combien avez vous de Boisson"); Nbr_Stock(i).Boisson:=i; Cases:=True;
--         Put ("combien avez vous de Biscuits");Nbr_Stock(i).Biscuit:=i; Cases:=True;
--         Put ("combien avez vous de Chocolat");Nbr_Stock(i).Chocolat:=i;Cases:=True;
--         Put ("combien avez vous de Fruits confits");Nbr_Stock(i).Fruits_Confits:=i;Cases:=True;

--        exit when cases=false; put ("toutes les cases ne sont pas remplies, veuilez recommencer");
--            Skip_Line;
--         END LOOP; END LOOP;


